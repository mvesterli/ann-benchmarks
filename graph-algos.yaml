float:
  any:
    pynndescent:
      docker-tag: ann-benchmarks-pynndescent
      module: ann_benchmarks.algorithms.graph.pynndescent
      constructor: PyNNDescent
      base-args: ["@metric"]
      run-groups:
        pynndescent:
          args: [[1, 5, 10, 15]]
    kgraph:
      docker-tag: ann-benchmarks-kgraph2
      module: ann_benchmarks.algorithms.graph.kgraph
      constructor: KGraph
      base-args: ["@metric"]
      run-groups:
        kgraph:
          args: { "L": [25, 50, 100], "recall": [0.2, 0.5, 0.7, 0.8, 0.9, 0.95, 0.99] }
    efanna:
      docker-tag: ann-benchmarks-efanna
      module: ann_benchmarks.algorithms.graph.subprocess
      constructor: FloatSubprocess
      base-args: [["efanna/annbenchmark_wrapper"]]
      run-groups:
        efanna:
          args: { "metric": ["@metric"], "num_trees": [8], "merge_level": [4], "iterations": [1, 2, 3, 4, 5, 6, 8, 10], "L": [10, 20], "check": [10, 30], "S": [10] }
    rknng:
      docker-tag: ann-benchmarks-rknng
      module: ann_benchmarks.algorithms.graph.subprocess
      constructor: FloatSubprocess
      base-args: [["rknng/annbenchmark_wrapper"]]
      run-groups:
        rknng:
          args: { "metric": ["@metric"], "window_width": [10, 15, 20, 25], "delta": [0.01, 0.02, 0.05], "nndes_start": [0.1, 0.2] }
    plain-lsh:
      docker-tag: none
      module: ann_benchmarks.algorithms.graph.puffinn
      constructor: PlainLSH
      base-args: ["@metric"]
      run-groups:
        plain-lsh:
          args: { "hash_function": ["simhash", "fht_crosspolytope"], "recall": [0.2, 0.5, 0.7, 0.8, 0.95, 0.99], "hash_length": [12, 14, 16, 18, 20] }
    projection-lsh:
      docker-tag: none
      module: ann_benchmarks.algorithms.graph.puffinn
      constructor: ProjectionLSH
      base-args: ["@metric"]
      run-groups:
        projection-lsh:
          args: { "hash_function": ["fht_crosspolytope"], "hash_length": [12, 14, 16, 18, 20], "repetitions": [100, 200, 400, 800], "block_size": [8] }
    variable-hash-lsh:
      docker-tag: none
      module: ann_benchmarks.algorithms.graph.puffinn
      constructor: VariableHashLSH
      base-args: ["@metric"]
      run-groups:
        variable-hash-lsh:
          args: { "hash_function": ["fht_crosspolytope"], "recall": [0.2, 0.5, 0.7, 0.8, 0.9, 0.95, 0.99] }
  angular: {}
  euclidean: {}

   
